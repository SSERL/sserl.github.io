[{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9c1f0aed654ea8b0193a5a776663fcdf","permalink":"https://sserl.github.io/members/faculty/john_georgas/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/faculty/john_georgas/","section":"members","summary":"Associate Professor","tags":["Faculty"],"title":"John Georgas","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6e88fd1569adbeb53ee4fb983e0cd99d","permalink":"https://sserl.github.io/members/faculty/marco_gerosa/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/faculty/marco_gerosa/","section":"members","summary":"Associate Professor","tags":["Faculty"],"title":"Marco Gerosa","type":"members"},{"authors":null,"categories":null,"content":"","date":1540582200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540582200,"objectID":"e6d9d8b4d1742eb1c35d011691b1a6f4","permalink":"https://sserl.github.io/members/faculty/alex_groce/","publishdate":"2018-10-26T12:30:00-07:00","relpermalink":"/members/faculty/alex_groce/","section":"members","summary":"Associate Professor","tags":["Faculty"],"title":"Alex Groce","type":"members"},{"authors":null,"categories":null,"content":"","date":1540582200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540582200,"objectID":"3a87d0c89ac39dca8e4a66af04229ec0","permalink":"https://sserl.github.io/members/faculty/frederic_loulergue/","publishdate":"2018-10-26T12:30:00-07:00","relpermalink":"/members/faculty/frederic_loulergue/","section":"members","summary":"Professor","tags":["Faculty"],"title":"Frédéric Loulergue","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"fe0cb9957410f15b8c2f7a8329eb01d1","permalink":"https://sserl.github.io/members/faculty/igor_steinmacher/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/faculty/igor_steinmacher/","section":"members","summary":"Assistant Professor","tags":["Faculty"],"title":"Igor Steinmacher","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8fb6e32f00b1249d37f890c8c7dfc8a2","permalink":"https://sserl.github.io/members/graduate/acs549/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/acs549/","section":"members","summary":"Graduate Teaching Assistant","tags":["Grad"],"title":"Ana Paula Chaves Steinmacher","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8ea32155f251d71f0ab4a8c5262e52dd","permalink":"https://sserl.github.io/members/graduate/as2544/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/as2544/","section":"members","summary":"Graduate Research Assistant","tags":["Grad"],"title":"Austin Sander","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cc535ff94492e5cf0871f0c63aa5fe17","permalink":"https://sserl.github.io/members/graduate/jp2589/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/jp2589/","section":"members","summary":"Graduate Research Assistant","tags":["Grad"],"title":"Jolan Philippe","type":"members"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e14b467e0c4378c99b35b7b53b73c4d2","permalink":"https://sserl.github.io/members/graduate/ss3465/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/ss3465/","section":"members","summary":"Graduate Research Assistant","tags":["Grad"],"title":"Salwa Souaf","type":"members"},{"authors":null,"categories":null,"content":"Arvid Jakobsson is a Phd student at the Université d\u0026rsquo;Orléans, France, and he is also working for Huawei Technologies France. His SSERL advisor is Frédéric Loulergue, and he is co-advised by Wadoud Bousdira and Frédéric Dabrowski at the Université d\u0026rsquo;Orléans, and Gaétan Hains and Wijnand Suijlen at Huawei Technologies France. His research is focused on the static analysis of scalable parallel programs.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6103cdcd250ced69767e3598d8f45430","permalink":"https://sserl.github.io/members/graduate/arvid_jakobsson/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/arvid_jakobsson/","section":"members","summary":"Université d'Orléans PhD Student","tags":["Grad"],"title":"Arvid Jakobsson","type":"members"},{"authors":null,"categories":null,"content":"Dara Ly is a Phd student at the Université d\u0026rsquo;Orléans, France, and he is also working for CEA LIST. His SSERL advisor is Frédéric Loulergue, and he is co-advised by Julien Signoles and Nikolai Kosmatov at CEA LIST. He works on the formal verification of a tool for runtime assertion checking.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"62f9e72586fc27add4943fb4e7d4579f","permalink":"https://sserl.github.io/members/graduate/dara_ly/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/dara_ly/","section":"members","summary":"Université d'Orléans PhD Student","tags":["Grad"],"title":"Dara Ly","type":"members"},{"authors":null,"categories":null,"content":"Thibaut Tachon is a Phd student at the Université d\u0026rsquo;Orléans, France, and he is also working for Huawei Technologies France. His SSERL advisor is Frédéric Loulergue, and he is co-advised by Gaétan Hains at Huawei Technologies France. His research is focused on the bulk synchronous parallel automata formalism.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d597aee37f924006b75384780cedcabe","permalink":"https://sserl.github.io/members/graduate/thibaut_tachon/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/members/graduate/thibaut_tachon/","section":"members","summary":"Université d'Orléans PhD Student","tags":["Grad"],"title":"Thibaut Tachon","type":"members"},{"authors":["Salwa Souaf","Pascal Berthomé","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"98564c7a64337cf060accdaaaf3c1ca9","permalink":"https://sserl.github.io/publication/sbl2018hpcs/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/sbl2018hpcs/","section":"publication","summary":"Cloud Computing has known in the past few years afast development, leading to a spike in the numberof companies competing on providing the best Cloudservices. This makes it harder for potential Cloudcustomers to chose the adequate provider. Despiteits wide adoption, many are still hesitant due tothe security issues Cloud Computing poses. In thispaper, we propose a brokerage solution thatformalizes security properties under the form ofinter-VM relations, and gives the possibility ofsetting these security requirements to its customersfrom the first steps. This solution uses formalmethods and the finite model finder KodKod to verifythe consistency of the customer's requirements, andto find a placement for his deployment model.","tags":null,"title":"A Cloud Brokerage Solution: Formal Methods MeetSecurity in Cloud Federations","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"42ce4fa041c52722f029a272753b0883","permalink":"https://sserl.github.io/publication/bkl2018hpcs/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018hpcs/","section":"publication","summary":" This paper is a tutorial introduction to Frama-C, aframework for the analysis and verification ofsequential C programs, and in particular its EVA,WP, and E-ACSL plugins.  The examples are drawn fromContiki, a lightweight operating system for theInternet of Things.","tags":null,"title":"A Lesson on Verification of IoT Software withFrama-C","type":"publication"},{"authors":["Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"fba6c72b0f3600b782cd42ea53b04d14","permalink":"https://sserl.github.io/publication/lou2018comlan/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/lou2018comlan/","section":"publication","summary":"","tags":null,"title":"Calculating Efficient Parallel Programs for GeneralAccumulative Computations with Coq","type":"publication"},{"authors":["Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"53cc1930474289a0e8f921eaef250ef9","permalink":"https://sserl.github.io/publication/lou2018scpe/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/lou2018scpe/","section":"publication","summary":"","tags":null,"title":"Functional Bulk Synchronous Parallel AlgorithmicSkeletons","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"4aa7d4edeb23f511d4c06315385c6ac0","permalink":"https://sserl.github.io/publication/bkl2018nfm/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018nfm/","section":"publication","summary":"Internet of Things (IoT) applications are becomingincreasingly critical and require rigorous formalverification.  In this paper we target Contiki, awidely used open-source OS for IoT, and present averification case study of one of its most criticalmodules: that of linked lists.  Its API and listrepresentation differ from the classical linked listimplementations, and are particularly challengingfor deductive verification.  The proposedverification technique relies on a parallel view ofa list through a companion ghost array.  Thisapproach makes it possible to perform most proofsautomatically using the Frama-C/WP tool, only asmall number of auxiliary lemmas being provedinteractively in the Coq proof assistant.  Wepresent an elegant segment-based reasoning over thecompanion array developed for the proof.  Finally,we validate the proposed specification by proving afew functions manipulating lists.","tags":null,"title":"Ghosts for Lists: A Critical Module of ContikiVerified in Frama-C","type":"publication"},{"authors":["Frédéric Loulergue","Allan Blanchard","Nikolai Kosmatov"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"bdff6ef0b7d165a099c7fef73b78fd88","permalink":"https://sserl.github.io/publication/lbk2018tap/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/lbk2018tap/","section":"publication","summary":"Internet of Things (IoT) applications are becomingincreasingly critical and require formalverification.  Our recent work presented formalverification of the linked list module of Contiki,an OS for IoT. It relies on a parallel view of alinked list via a companion ghost array and uses aninductive predicate to link both views.  A fewinteractively proved lemmas allow for an automaticproof of other specifications, expressed in the ACSLspecification language and proved with theFrama-C/WP tool.  In a broader verification context,especially as long as the whole system is not yetformally verified, it would be very useful to useruntime verification, in particular, to test clientmodules that use the list module.  It is notpossible with the current specifications, whichinclude an inductive predicate and axiomaticallydefined functions.  In this early-idea paper we showhow to define a provably equivalent non-inductivepredicate and a provably equivalent non-axiomaticfunction that belong to the executable subset eacslof ACSL and can be transformed into executable Ccode.  Finally, we propose an extension of Frama-Cto handle both axiomatic specifications fordeductive verification and executable specificationsfor runtime verification.","tags":null,"title":"Ghosts for Lists: from Axiomatic to ExecutableSpecifications","type":"publication"},{"authors":["Julien Tesson","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"3dbfd2a80241b9c6d7fc187c0569f986","permalink":"https://sserl.github.io/publication/tl2018atc/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/tl2018atc/","section":"publication","summary":"This paper presents the design and implementation ofa sequential simulator for the parallel functionallanguage BSML based on the parallel computationmodel Bulk Synchronous Parallelism (BSP). Thissimulator is implemented in sequential, runs in anybrowser, and provides a graphical representation ofthe parallel executions.  Due to the pure functionalnature of BSML, the results obtained by thissimulator are the same than the results that couldbe obtained by executing the program in parallel","tags":null,"title":"Interactive Bulk Synchronous Parallel FunctionalProgramming in a Browser","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"b112c62cad8c3e892000c4a58442e010","permalink":"https://sserl.github.io/publication/bkl2018comlan/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018comlan/","section":"publication","summary":"With the wide expansion of multiprocessorarchitectures, the analysis and reasoning forprograms under weak memory models has become animportant concern. This work presents MMFilter, anoriginal constraint solver for generating programbehaviors respecting a particular memory model. Itis implemented in Prolog using CHR (ConstraintHandling Rules). The CHR formalism provides aconvenient generic solution for specifying memorymodels. It benefits from the existing optimizedimplementations of CHR and can be easily extended tonew models. We present MMFilter design, illustratethe encoding of memory model constraints in CHR anddiscuss the benefits and limitations of the proposedtechnique.","tags":null,"title":"MMFilter: A CHR-Based Solver for Generation ofExecutions under Weak Memory Models","type":"publication"},{"authors":["Victor Allombert","Mathias Bourgoin","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"a14f4165bc280858a3155624ee67cd37","permalink":"https://sserl.github.io/publication/abl2018hpcs/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/abl2018hpcs/","section":"publication","summary":"OCaml is a multi-paradigm (functional, imperative,object-oriented) high level sequential  language. Types are statically inferred by thecompiler and the type system is expressive andstrong.  These features make OCaml a very productivelanguage for developing efficient and safe programs.In this tutorial we present three frameworks forusing OCaml to program scalable parallelarchitectures: BSML, Multi-ML and Spoc.","tags":null,"title":"Parallel Programming with OCaml: A Tutorial","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"5bfffe542fa16bde46d38cc1f8dc5a39","permalink":"https://sserl.github.io/publication/bkl2018secdev/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018secdev/","section":"publication","summary":" Among distributed systems, connected devices andservices, also referred to as the Internet of Things(IoT), have proliferated very quickly in the pastyears. There are now billions of interconnecteddevices, and this number is growing. It isanticipated that by 2021, about 46 billions ofdevices will be in use.  Some of these devices arein service in security critical domains, and even indomains that are not necessarily critical, privacyissues may arise with devices collecting andtransmitting a lot of personal information. Moreoverinsufficiently secured devices may be used forexample for massive distributed denial of serviceattacks.  This raises important securitychallenges. Formal methods have been usedsuccessfully for years in highly critical domains,now they can help to bring security into the IoTfield.  While the correctness of an implementationwith respect to a formal functional specificationprovides the strongest form of guarantee, it can bevery costly to achieve. In practice it is thereforemore common to rely on a combination of formalmethods to achieve an appropriate degree ofguarantee: static analyses to guarantee the absenceof runtime errors, deductive verification offunctional correctness, dynamic verification forparts that cannot be proved using deductiveverification.  Frama-C is a source code analysisplatform that aims at conducting verification ofindustrial-size programs written in ISO C99 sourcecode. Frama-C fully supports the combination offormal methods approach, by providing to its userswith a collection of plug-ins that perform staticand dynamic analysis for safety and securitycritical software. Moreover collaborativeverification across cooperating plug-ins is enabledby their integration on top of a shared kernel, andtheir compliance to a common specification language:ACSL~.  Recently Frama-C has been applied to theverification of software in the context of theInternet of Things, more specifically theverification of modules of Contiki, an open sourceoperating system for the IoT.","tags":null,"title":"Secure Your Things: Secure Development of IoTSoftware with Frama-C","type":"publication"},{"authors":["Dara Ly","Nikolai Kosmatov","Frédéric Loulergue","Julien Signoles"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"2b04b54b4c985a1ccfff83b700617844","permalink":"https://sserl.github.io/publication/lkl2018hilt/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/lkl2018hilt/","section":"publication","summary":"An important concern addressed by runtimeverification tools for C code is related todetecting memory errors. It requires to monitor someproperties of memory locations (e.g. their validityand initialization) along the whole programexecution. Static analysis based optimizations havebeen shown to significantly improve the performancesof such tools by reducing the monitoring ofirrelevant locations. However, soundness of theverdict of the whole tool strongly depends on thesoundness of the underlying static analysistechnique. This paper tackles this issue for thedataflow analysis used to optimize the E-ACSLruntime assertion checking tool. We formally definethe core dataflow analysis used by E-ACSL and proveits soundness.","tags":null,"title":"Soundness of a Dataflow Analysis for MemoryMonitoring","type":"publication"},{"authors":["Salwa Souaf","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"e3db28944ac7457b24da9c1e662b8817","permalink":"https://sserl.github.io/publication/sl2018hpcs/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/sl2018hpcs/","section":"publication","summary":"","tags":null,"title":"Strong Security Guarantees: from Alloy to Coq(Poster)","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"caf600bfcc435c3f865d784ed1154642","permalink":"https://sserl.github.io/publication/bkl2018issre/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018issre/","section":"publication","summary":"Abstract Among distributed systems, connecteddevices and services, also referred to as theInternet of Things (IoT), have proliferated veryquickly in the past years. There are now billions ofinterconnected devices, and this number isgrowing. It is anticipated that by 2021, about 46billions of devices will be in use. Some of thesedevices are in service in safety and securitycritical domains, and even in domains that are notnecessarily critical, privacy issues may arise withdevices collecting and transmitting a lot ofpersonal information. Formal methods have been usedsuccessfully for years in highly critical domains,now they can help to bring security into the IoTfield. In practice it is common to rely on acombination of formal methods to achieve anappropriate degree of guarantee: static analyses toguarantee the absence of runtime errors, deductiveverification of functional correctness, dynamicverification for parts that cannot be proved usingdeductive verification. This tutorial is focused onFrama-C, which is a source code analysis platformthat aims at conducting verification ofindustrial-size programs written in ISO C99 sourcecode. Frama-C fully supports the combination offormal methods approach, by providing to its userswith a collection of plug-ins that perform staticand dynamic analysis for safety and securitycritical software. Moreover collaborativeverification across cooperating plugins is enabledby their integration on top of a shared kernel, andtheir compliance to a common specification languageACSL. Recently Frama-C has been applied to theverification of software in the context of theInternet of Things.","tags":null,"title":"Towards Reliable Things: Formal Verification of IoT Software with Frama-C","type":"publication"},{"authors":["Allan Blanchard","Nikolai Kosmatov","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"b467577a7ce38ac76a0b3e12a3d6339e","permalink":"https://sserl.github.io/publication/bkl2018zinc/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/bkl2018zinc/","section":"publication","summary":"It is commonly said the \"S\" in Internet of Things(IoT) stands for \"Security\": when it is not absent,it is at least unnoticeable. However, security inIoT becomes an important concern since in both theindustry and everyday life, it is gaining wider andwider adoption. Thus, IoT is now targeting morecritical domains, and making domains that were notcritical, until now, collect and transmit a lot ofpersonal data.  For years, this kind of challengeshave been successfully addressed in highly criticaldomains using formal methods. Now, formal methodscan help to bring security in the IoT field. Frama-Cis a source code analysis platform used to conductverification of industrial-size programs written inISO C99. It provides a collection of plug-ins thatperform static and dynamic analysis for safety andsecurity critical software. These plug-ins cancollaborate to the verification task thanks to theirintegration on top of a shared kernel and theircompliance to ACSL, a specification language for C.Participants will learn how to use different Frama-Canalyzers and how to combine their results. Duringthe tutorial, several examples and use-cases willgive them a clear practical vision of possibleusages of the underlying static and dynamic analysesin their everyday work. The presented code fragmentsare part of Contiki, a realworld lightweightoperating system for the IoT. Each part consists ofa presentation using slides and live demonstration,and a session of exercises. The attendees will beprovided a virtual machine image for VirtualBoxcontaining all the tools ready to use, to work onthe exercises. We will also provide additionalexercises and we will be available during theconference (and after) to help the attendees who maywant to go beyond the tutorial material.  ","tags":null,"title":"Towards Secure Things, or How to Verify IoTSoftware with Frama-C","type":"publication"},{"authors":["Jolan Philippe","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"6cf57cf27a979d88a3af48d5876bd790","permalink":"https://sserl.github.io/publication/pl2018hpcs/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/pl2018hpcs/","section":"publication","summary":"","tags":null,"title":"Towards the Generation of Correct Java Programs(Poster)","type":"publication"},{"authors":["Virginia Niculescu","Frédéric Loulergue"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"58d898ca4636c5a17f00c1559447fb9b","permalink":"https://sserl.github.io/publication/nl2018hlpp/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/nl2018hlpp/","section":"publication","summary":"Divide\u0026Conquer (DC) represents an important designpattern for parallel programs.  Powerlists are datastructures that could be successfully used fordefining parallel programs based on this paradigm.These parallel recursive data structures and theiralgebraic theories offer both a methodology todesign parallel algorithms and parallel programmingabstractions to ease the development of parallelapplications.  The paper presents an improvement ofthe parallel recursive programs defined based onpowerlists. The improvements is achieved by applyingtransformation rules that introduce tuple functionsand prefix operators, for which a more efficientexecution model is defined. Together with theexecution model, a cost model is also defined inorder to allow a proper evaluation.  The treatedexamples emphasize the fact that the transformationleads to important improvements of the programs, byreducing their theoretical time-complexities, andthe number of recursive calls, and also by allowingsplitting and combining of different data structuresto be packed together. Also, enhancing the functionthat has to be computed to other useful functionsusing a tuple, could improved the cost reductioneven more.","tags":null,"title":"Transforming Powerlist Based Divide\u0026ConquerPrograms for an Improved Execution Model","type":"publication"},{"authors":["Frédéric Loulergue","Christopher D. Whitney"],"categories":null,"content":"","date":1514790000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514790000,"objectID":"dd0f511d3c88f26d8b71529a91aaf37c","permalink":"https://sserl.github.io/publication/lw2018atc/","publishdate":"2018-01-01T00:00:00-07:00","relpermalink":"/publication/lw2018atc/","section":"publication","summary":"Frequent itemset mining is one pillar of machinelearning and is very important for many data miningapplications. There are many different algorithmsfor frequent itemset mining, but to our knowledge noimplementation has been proven correct usingcomputer aided verification. Hu et al. derived onpaper an efficient algorithm for this problem,starting from an inefficient functional program andby using program calculation derived an efficientversion. Based on their work, we propose a formallyverified functional implementation for frequentitemset mining developed with the Coq proofassistant. All the proposed programs are evaluatedon classical datasets and are compared to a nonverified Java implementation of the Apriorialgorithm.  ","tags":null,"title":"Verified Programs for Frequent Itemset Mining","type":"publication"}]